---
alwaysApply: true
---
Python Telegram Bot AI Coding Rules

CORE PRINCIPLES:
DRY (Don't Repeat Yourself) - ABSOLUTE PRIORITY. Use existing libraries, NEVER reinvent. Minimal code, maximum functionality. If unsure - search PyPI/GitHub first.

COMMENTS STYLE (ОБЯЗАТЕЛЬНО):
Все комментарии только на русском языке. Используй разделители из символов равно для логических блоков: # ================================================. Формат блока: сначала разделитель, потом описание блока, потом снова разделитель. Краткие пояснения для сложной логики inline комментариями. Никаких английских комментариев. БЕЗ DOCSTRING - только обычные комментарии над функциями если нужно.

ARCHITECTURE:
Single responsibility per function. Generic methods with parameters, not duplicates. Composition over inheritance. Dependency injection for testability. Async/await везде где возможно.

MUST USE LIBRARIES:
aiogram 3.x (предпочтительно) или python-telegram-bot latest. pydantic для валидации данных. python-dotenv для конфигурации. aiohttp для HTTP запросов. sqlalchemy с asyncpg для БД. redis для кэширования. Standard library first, then popular packages.

CODE STYLE:
Никогда не пиши похожие функции - создавай универсальные с параметрами. Используй декораторы для общей логики. Конфиг через переменные окружения. Типизация через type hints обязательна. Обработка ошибок через try/except с логированием.

SEARCH BEFORE CODE:
Unknown feature - search "telegram bot {feature} python". Check official docs first. Use stackoverflow solutions. Verify package popularity (stars, downloads). Ищи готовые библиотеки на PyPI перед написанием своего кода.

FORBIDDEN:
Docstrings ("""...""") - никогда не используй. Custom implementations of existing solutions. Copy-paste similar code blocks. Hardcoded values - use config/env. Writing own parsers/validators. English comments. Синхронный код где можно async. Глобальные переменные.

STRUCTURE:
bot.py - точка входа. handlers/ - обработчики команд. services/ - бизнес логика. models/ - pydantic модели. utils/ - вспомогательные функции. config.py - настройки из env.