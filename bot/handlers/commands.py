from datetime import datetime, timedelta

from aiogram import F, Router, types
from aiogram.filters import Command, CommandObject
from aiogram.exceptions import TelegramBadRequest

from bot.database.database import Database
from bot.database.models import User
from bot.keyboards.keyboards import get_models_keyboard
from bot.utils.localization import get_text
from config import YOUR_ADMIN_ID, REFERRAL_TOKENS

from .base import (
    get_user_decorator, send_localized_message, create_simple_command_handler, logger
)

# ================================================
# –†–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
# ================================================
router = Router()

# ================================================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ================================================
async def process_referral(message: types.Message, user: User, db: Database) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    if len(message.text.split()) <= 1:
        return
    try:
        inviter_id = int(message.text.split()[1])
        if inviter_id == user.user_id:
            await message.answer("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ!")
            return

        inviter = await db.users.find_one({"user_id": inviter_id})
        if not inviter or message.from_user.id in inviter.get("invited_users", []):
            return

        manager = await db.get_user_manager()
        await manager.add_invited_user(inviter_id, message.from_user.id)
        await send_inviter_notification(
            inviter_id, len(inviter.get("invited_users", []) + 1), db, message.bot
        )
    except (ValueError, TypeError) as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {str(e)}")

async def send_inviter_notification(
    inviter_id: int, invited_count: int, db: Database, bot
) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    manager = await db.get_user_manager()
    user = await manager.get_user(
        inviter_id, None, "en"
    )  # Username –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    text = await send_localized_message(
        None,
        "new_invited_user_tokens",
        user,
        invited_count=invited_count,
        referral_tokens=REFERRAL_TOKENS,
        return_text=True,
    )
    await bot.send_message(inviter_id, text)

# ================================================
# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
# ================================================
@router.message(Command("send_all"))
async def admin_send_all(message: types.Message, command: CommandObject, db: Database):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id != YOUR_ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if not command.args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_all —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    text = command.args
    users = await db.users.find({}).to_list(None)
    success_count = 0
    failed_count = 0

    for user in users:
        try:
            await message.bot.send_message(user["user_id"], text)
            success_count += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {str(e)}")
            failed_count += 1

    await message.answer(
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {success_count}, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}"
    )

@router.message(Command("start"))
async def start_command(message: types.Message, db: Database):
    """–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    manager = await db.get_user_manager()
    user = await manager.get_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.language_code,
    )

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if len(message.text.split()) > 1:
        await process_referral(message, user, db)

    await send_localized_message(message, "start", user)

@router.message(Command("invite"))
@get_user_decorator
async def invite_command(message: types.Message, db: Database, user: User):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    invite_link = f"https://t.me/DockMixAIbot?start={user.user_id}"
    text = "\n\n".join(
        [
            f"üîó –í–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {invite_link}",
            f"üë• –í–∏ –∑–∞–ø—Ä–æ—Å–∏–ª–∏: {len(user.invited_users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
        ]
    )
    await message.answer(text)

@router.message(Command("profile"))
@get_user_decorator
async def profile_command(message: types.Message, db: Database, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ"""
    # Get current agent and mode info
    current_agent = user.get_current_agent()
    current_history = user.get_current_history()
    
    if current_agent:
        current_mode = get_text("profile_mode_agent", user.language_code, agent_name=current_agent.name)
    else:
        current_mode = get_text("profile_mode_default", user.language_code)
    
    history_count = len(current_history)
    
    await send_localized_message(
        message, "profile", user,
        current_mode=current_mode,
        history_count=history_count
    )

@router.message(Command("help"))
async def help_command(message: types.Message, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    await create_simple_command_handler("help")(message, db)

@router.message(Command("reset"))
@get_user_decorator
async def reset_command(message: types.Message, db: Database, user: User):
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    manager = await db.get_user_manager()
    
    # Get current agent to determine which history to clear
    current_agent = user.get_current_agent()
    agent_id = current_agent.agent_id if current_agent else None
    
    # Clear history for current context
    await manager.clear_history(user.user_id, agent_id)
    
    # Send localized confirmation message
    if current_agent:
        await send_localized_message(
            message, "history_reset_agent", user, agent_name=current_agent.name
        )
    else:
        await send_localized_message(message, "history_reset_default", user)

@router.message(Command("models"))
@get_user_decorator
async def models_command(message: types.Message, db: Database, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    await send_localized_message(
        message, "select_model", user,
        reply_markup=get_models_keyboard(user.language_code)
    )

@router.callback_query(F.data.startswith("model_"))
@get_user_decorator
async def change_model_handler(callback: types.CallbackQuery, db: Database, user: User):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å"""
    model = callback.data.split("_")[1]
    manager = await db.get_user_manager()
    await manager.update_user(user.user_id, {"current_model": model})
    await send_localized_message(callback.message, "model_changed", user, model=model)
